"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rss-parser";
exports.ids = ["vendor-chunks/rss-parser"];
exports.modules = {

/***/ "(rsc)/./node_modules/rss-parser/index.js":
/*!******************************************!*\
  !*** ./node_modules/rss-parser/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./lib/parser */ \"(rsc)/./node_modules/rss-parser/lib/parser.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcnNzLXBhcnNlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSx5R0FBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZWUtcm9iaW5zb24tcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL3Jzcy1wYXJzZXIvaW5kZXguanM/ZTBiNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvcGFyc2VyJyk7XG5cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/rss-parser/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/rss-parser/lib/fields.js":
/*!***********************************************!*\
  !*** ./node_modules/rss-parser/lib/fields.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\nconst fields = module.exports = {};\nfields.feed = [\n    [\n        \"author\",\n        \"creator\"\n    ],\n    [\n        \"dc:publisher\",\n        \"publisher\"\n    ],\n    [\n        \"dc:creator\",\n        \"creator\"\n    ],\n    [\n        \"dc:source\",\n        \"source\"\n    ],\n    [\n        \"dc:title\",\n        \"title\"\n    ],\n    [\n        \"dc:type\",\n        \"type\"\n    ],\n    \"title\",\n    \"description\",\n    \"author\",\n    \"pubDate\",\n    \"webMaster\",\n    \"managingEditor\",\n    \"generator\",\n    \"link\",\n    \"language\",\n    \"copyright\",\n    \"lastBuildDate\",\n    \"docs\",\n    \"generator\",\n    \"ttl\",\n    \"rating\",\n    \"skipHours\",\n    \"skipDays\"\n];\nfields.item = [\n    [\n        \"author\",\n        \"creator\"\n    ],\n    [\n        \"dc:creator\",\n        \"creator\"\n    ],\n    [\n        \"dc:date\",\n        \"date\"\n    ],\n    [\n        \"dc:language\",\n        \"language\"\n    ],\n    [\n        \"dc:rights\",\n        \"rights\"\n    ],\n    [\n        \"dc:source\",\n        \"source\"\n    ],\n    [\n        \"dc:title\",\n        \"title\"\n    ],\n    \"title\",\n    \"link\",\n    \"pubDate\",\n    \"author\",\n    \"summary\",\n    [\n        \"content:encoded\",\n        \"content:encoded\",\n        {\n            includeSnippet: true\n        }\n    ],\n    \"enclosure\",\n    \"dc:creator\",\n    \"dc:date\",\n    \"comments\"\n];\nvar mapItunesField = function(f) {\n    return [\n        \"itunes:\" + f,\n        f\n    ];\n};\nfields.podcastFeed = [\n    \"author\",\n    \"subtitle\",\n    \"summary\",\n    \"explicit\"\n].map(mapItunesField);\nfields.podcastItem = [\n    \"author\",\n    \"subtitle\",\n    \"summary\",\n    \"explicit\",\n    \"duration\",\n    \"image\",\n    \"episode\",\n    \"image\",\n    \"season\",\n    \"keywords\",\n    \"episodeType\"\n].map(mapItunesField);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcnNzLXBhcnNlci9saWIvZmllbGRzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxTQUFTQyxPQUFPQyxPQUFPLEdBQUcsQ0FBQztBQUVqQ0YsT0FBT0csSUFBSSxHQUFHO0lBQ1o7UUFBQztRQUFVO0tBQVU7SUFDckI7UUFBQztRQUFnQjtLQUFZO0lBQzdCO1FBQUM7UUFBYztLQUFVO0lBQ3pCO1FBQUM7UUFBYTtLQUFTO0lBQ3ZCO1FBQUM7UUFBWTtLQUFRO0lBQ3JCO1FBQUM7UUFBVztLQUFPO0lBQ25CO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUVESCxPQUFPSSxJQUFJLEdBQUc7SUFDWjtRQUFDO1FBQVU7S0FBVTtJQUNyQjtRQUFDO1FBQWM7S0FBVTtJQUN6QjtRQUFDO1FBQVc7S0FBTztJQUNuQjtRQUFDO1FBQWU7S0FBVztJQUMzQjtRQUFDO1FBQWE7S0FBUztJQUN2QjtRQUFDO1FBQWE7S0FBUztJQUN2QjtRQUFDO1FBQVk7S0FBUTtJQUNyQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7UUFBQztRQUFtQjtRQUFtQjtZQUFDQyxnQkFBZ0I7UUFBSTtLQUFFO0lBQzlEO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFFRCxJQUFJQyxpQkFBaUIsU0FBU0MsQ0FBQztJQUM3QixPQUFPO1FBQUMsWUFBWUE7UUFBR0E7S0FBRTtBQUMzQjtBQUVBUCxPQUFPUSxXQUFXLEdBQUc7SUFDbkI7SUFDQTtJQUNBO0lBQ0E7Q0FDRCxDQUFFQyxHQUFHLENBQUNIO0FBRVBOLE9BQU9VLFdBQVcsR0FBRztJQUNuQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0QsQ0FBRUQsR0FBRyxDQUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL2xlZS1yb2JpbnNvbi1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvcnNzLXBhcnNlci9saWIvZmllbGRzLmpzPzExYWYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZmllbGRzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuZmllbGRzLmZlZWQgPSBbXG4gIFsnYXV0aG9yJywgJ2NyZWF0b3InXSxcbiAgWydkYzpwdWJsaXNoZXInLCAncHVibGlzaGVyJ10sXG4gIFsnZGM6Y3JlYXRvcicsICdjcmVhdG9yJ10sXG4gIFsnZGM6c291cmNlJywgJ3NvdXJjZSddLFxuICBbJ2RjOnRpdGxlJywgJ3RpdGxlJ10sXG4gIFsnZGM6dHlwZScsICd0eXBlJ10sXG4gICd0aXRsZScsXG4gICdkZXNjcmlwdGlvbicsXG4gICdhdXRob3InLFxuICAncHViRGF0ZScsXG4gICd3ZWJNYXN0ZXInLFxuICAnbWFuYWdpbmdFZGl0b3InLFxuICAnZ2VuZXJhdG9yJyxcbiAgJ2xpbmsnLFxuICAnbGFuZ3VhZ2UnLFxuICAnY29weXJpZ2h0JyxcbiAgJ2xhc3RCdWlsZERhdGUnLFxuICAnZG9jcycsXG4gICdnZW5lcmF0b3InLFxuICAndHRsJyxcbiAgJ3JhdGluZycsXG4gICdza2lwSG91cnMnLFxuICAnc2tpcERheXMnLFxuXTtcblxuZmllbGRzLml0ZW0gPSBbXG4gIFsnYXV0aG9yJywgJ2NyZWF0b3InXSxcbiAgWydkYzpjcmVhdG9yJywgJ2NyZWF0b3InXSxcbiAgWydkYzpkYXRlJywgJ2RhdGUnXSxcbiAgWydkYzpsYW5ndWFnZScsICdsYW5ndWFnZSddLFxuICBbJ2RjOnJpZ2h0cycsICdyaWdodHMnXSxcbiAgWydkYzpzb3VyY2UnLCAnc291cmNlJ10sXG4gIFsnZGM6dGl0bGUnLCAndGl0bGUnXSxcbiAgJ3RpdGxlJyxcbiAgJ2xpbmsnLFxuICAncHViRGF0ZScsXG4gICdhdXRob3InLFxuICAnc3VtbWFyeScsXG4gIFsnY29udGVudDplbmNvZGVkJywgJ2NvbnRlbnQ6ZW5jb2RlZCcsIHtpbmNsdWRlU25pcHBldDogdHJ1ZX1dLFxuICAnZW5jbG9zdXJlJyxcbiAgJ2RjOmNyZWF0b3InLFxuICAnZGM6ZGF0ZScsXG4gICdjb21tZW50cycsXG5dO1xuXG52YXIgbWFwSXR1bmVzRmllbGQgPSBmdW5jdGlvbihmKSB7XG4gIHJldHVybiBbJ2l0dW5lczonICsgZiwgZl07XG59XG5cbmZpZWxkcy5wb2RjYXN0RmVlZCA9IChbXG4gICdhdXRob3InLFxuICAnc3VidGl0bGUnLFxuICAnc3VtbWFyeScsXG4gICdleHBsaWNpdCdcbl0pLm1hcChtYXBJdHVuZXNGaWVsZCk7XG5cbmZpZWxkcy5wb2RjYXN0SXRlbSA9IChbXG4gICdhdXRob3InLFxuICAnc3VidGl0bGUnLFxuICAnc3VtbWFyeScsXG4gICdleHBsaWNpdCcsXG4gICdkdXJhdGlvbicsXG4gICdpbWFnZScsXG4gICdlcGlzb2RlJyxcbiAgJ2ltYWdlJyxcbiAgJ3NlYXNvbicsXG4gICdrZXl3b3JkcycsXG4gICdlcGlzb2RlVHlwZSdcbl0pLm1hcChtYXBJdHVuZXNGaWVsZCk7XG5cbiJdLCJuYW1lcyI6WyJmaWVsZHMiLCJtb2R1bGUiLCJleHBvcnRzIiwiZmVlZCIsIml0ZW0iLCJpbmNsdWRlU25pcHBldCIsIm1hcEl0dW5lc0ZpZWxkIiwiZiIsInBvZGNhc3RGZWVkIiwibWFwIiwicG9kY2FzdEl0ZW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/rss-parser/lib/fields.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/rss-parser/lib/parser.js":
/*!***********************************************!*\
  !*** ./node_modules/rss-parser/lib/parser.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst xml2js = __webpack_require__(/*! xml2js */ \"(rsc)/./node_modules/xml2js/lib/xml2js.js\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst fields = __webpack_require__(/*! ./fields */ \"(rsc)/./node_modules/rss-parser/lib/fields.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/rss-parser/lib/utils.js\");\nconst DEFAULT_HEADERS = {\n    \"User-Agent\": \"rss-parser\",\n    \"Accept\": \"application/rss+xml\"\n};\nconst DEFAULT_MAX_REDIRECTS = 5;\nconst DEFAULT_TIMEOUT = 60000;\nclass Parser {\n    constructor(options = {}){\n        options.headers = options.headers || {};\n        options.xml2js = options.xml2js || {};\n        options.customFields = options.customFields || {};\n        options.customFields.item = options.customFields.item || [];\n        options.customFields.feed = options.customFields.feed || [];\n        options.requestOptions = options.requestOptions || {};\n        if (!options.maxRedirects) options.maxRedirects = DEFAULT_MAX_REDIRECTS;\n        if (!options.timeout) options.timeout = DEFAULT_TIMEOUT;\n        this.options = options;\n        this.xmlParser = new xml2js.Parser(this.options.xml2js);\n    }\n    parseString(xml, callback) {\n        let prom = new Promise((resolve, reject)=>{\n            this.xmlParser.parseString(xml, (err, result)=>{\n                if (err) return reject(err);\n                if (!result) {\n                    return reject(new Error(\"Unable to parse XML.\"));\n                }\n                let feed = null;\n                if (result.feed) {\n                    feed = this.buildAtomFeed(result);\n                } else if (result.rss && result.rss.$ && result.rss.$.version && result.rss.$.version.match(/^2/)) {\n                    feed = this.buildRSS2(result);\n                } else if (result[\"rdf:RDF\"]) {\n                    feed = this.buildRSS1(result);\n                } else if (result.rss && result.rss.$ && result.rss.$.version && result.rss.$.version.match(/0\\.9/)) {\n                    feed = this.buildRSS0_9(result);\n                } else if (result.rss && this.options.defaultRSS) {\n                    switch(this.options.defaultRSS){\n                        case 0.9:\n                            feed = this.buildRSS0_9(result);\n                            break;\n                        case 1:\n                            feed = this.buildRSS1(result);\n                            break;\n                        case 2:\n                            feed = this.buildRSS2(result);\n                            break;\n                        default:\n                            return reject(new Error(\"default RSS version not recognized.\"));\n                    }\n                } else {\n                    return reject(new Error(\"Feed not recognized as RSS 1 or 2.\"));\n                }\n                resolve(feed);\n            });\n        });\n        prom = utils.maybePromisify(callback, prom);\n        return prom;\n    }\n    parseURL(feedUrl, callback, redirectCount = 0) {\n        let xml = \"\";\n        let get = feedUrl.indexOf(\"https\") === 0 ? https.get : http.get;\n        let urlParts = url.parse(feedUrl);\n        let headers = Object.assign({}, DEFAULT_HEADERS, this.options.headers);\n        let timeout = null;\n        let prom = new Promise((resolve, reject)=>{\n            const requestOpts = Object.assign({\n                headers\n            }, urlParts, this.options.requestOptions);\n            let req = get(requestOpts, (res)=>{\n                if (this.options.maxRedirects && res.statusCode >= 300 && res.statusCode < 400 && res.headers[\"location\"]) {\n                    if (redirectCount === this.options.maxRedirects) {\n                        return reject(new Error(\"Too many redirects\"));\n                    } else {\n                        const newLocation = url.resolve(feedUrl, res.headers[\"location\"]);\n                        return this.parseURL(newLocation, null, redirectCount + 1).then(resolve, reject);\n                    }\n                } else if (res.statusCode >= 300) {\n                    return reject(new Error(\"Status code \" + res.statusCode));\n                }\n                let encoding = utils.getEncodingFromContentType(res.headers[\"content-type\"]);\n                res.setEncoding(encoding);\n                res.on(\"data\", (chunk)=>{\n                    xml += chunk;\n                });\n                res.on(\"end\", ()=>{\n                    return this.parseString(xml).then(resolve, reject);\n                });\n            });\n            req.on(\"error\", reject);\n            timeout = setTimeout(()=>{\n                return reject(new Error(\"Request timed out after \" + this.options.timeout + \"ms\"));\n            }, this.options.timeout);\n        }).then((data)=>{\n            clearTimeout(timeout);\n            return Promise.resolve(data);\n        }, (e)=>{\n            clearTimeout(timeout);\n            return Promise.reject(e);\n        });\n        prom = utils.maybePromisify(callback, prom);\n        return prom;\n    }\n    buildAtomFeed(xmlObj) {\n        let feed = {\n            items: []\n        };\n        utils.copyFromXML(xmlObj.feed, feed, this.options.customFields.feed);\n        if (xmlObj.feed.link) {\n            feed.link = utils.getLink(xmlObj.feed.link, \"alternate\", 0);\n            feed.feedUrl = utils.getLink(xmlObj.feed.link, \"self\", 1);\n        }\n        if (xmlObj.feed.title) {\n            let title = xmlObj.feed.title[0] || \"\";\n            if (title._) title = title._;\n            if (title) feed.title = title;\n        }\n        if (xmlObj.feed.updated) {\n            feed.lastBuildDate = xmlObj.feed.updated[0];\n        }\n        feed.items = (xmlObj.feed.entry || []).map((entry)=>this.parseItemAtom(entry));\n        return feed;\n    }\n    parseItemAtom(entry) {\n        let item = {};\n        utils.copyFromXML(entry, item, this.options.customFields.item);\n        if (entry.title) {\n            let title = entry.title[0] || \"\";\n            if (title._) title = title._;\n            if (title) item.title = title;\n        }\n        if (entry.link && entry.link.length) {\n            item.link = utils.getLink(entry.link, \"alternate\", 0);\n        }\n        if (entry.published && entry.published.length && entry.published[0].length) item.pubDate = new Date(entry.published[0]).toISOString();\n        if (!item.pubDate && entry.updated && entry.updated.length && entry.updated[0].length) item.pubDate = new Date(entry.updated[0]).toISOString();\n        if (entry.author && entry.author.length && entry.author[0].name && entry.author[0].name.length) item.author = entry.author[0].name[0];\n        if (entry.content && entry.content.length) {\n            item.content = utils.getContent(entry.content[0]);\n            item.contentSnippet = utils.getSnippet(item.content);\n        }\n        if (entry.summary && entry.summary.length) {\n            item.summary = utils.getContent(entry.summary[0]);\n        }\n        if (entry.id) {\n            item.id = entry.id[0];\n        }\n        this.setISODate(item);\n        return item;\n    }\n    buildRSS0_9(xmlObj) {\n        var channel = xmlObj.rss.channel[0];\n        var items = channel.item;\n        return this.buildRSS(channel, items);\n    }\n    buildRSS1(xmlObj) {\n        xmlObj = xmlObj[\"rdf:RDF\"];\n        let channel = xmlObj.channel[0];\n        let items = xmlObj.item;\n        return this.buildRSS(channel, items);\n    }\n    buildRSS2(xmlObj) {\n        let channel = xmlObj.rss.channel[0];\n        let items = channel.item;\n        let feed = this.buildRSS(channel, items);\n        if (xmlObj.rss.$ && xmlObj.rss.$[\"xmlns:itunes\"]) {\n            this.decorateItunes(feed, channel);\n        }\n        return feed;\n    }\n    buildRSS(channel, items) {\n        items = items || [];\n        let feed = {\n            items: []\n        };\n        let feedFields = fields.feed.concat(this.options.customFields.feed);\n        let itemFields = fields.item.concat(this.options.customFields.item);\n        if (channel[\"atom:link\"] && channel[\"atom:link\"][0] && channel[\"atom:link\"][0].$) {\n            feed.feedUrl = channel[\"atom:link\"][0].$.href;\n        }\n        if (channel.image && channel.image[0] && channel.image[0].url) {\n            feed.image = {};\n            let image = channel.image[0];\n            if (image.link) feed.image.link = image.link[0];\n            if (image.url) feed.image.url = image.url[0];\n            if (image.title) feed.image.title = image.title[0];\n            if (image.width) feed.image.width = image.width[0];\n            if (image.height) feed.image.height = image.height[0];\n        }\n        const paginationLinks = this.generatePaginationLinks(channel);\n        if (Object.keys(paginationLinks).length) {\n            feed.paginationLinks = paginationLinks;\n        }\n        utils.copyFromXML(channel, feed, feedFields);\n        feed.items = items.map((xmlItem)=>this.parseItemRss(xmlItem, itemFields));\n        return feed;\n    }\n    parseItemRss(xmlItem, itemFields) {\n        let item = {};\n        utils.copyFromXML(xmlItem, item, itemFields);\n        if (xmlItem.enclosure) {\n            item.enclosure = xmlItem.enclosure[0].$;\n        }\n        if (xmlItem.description) {\n            item.content = utils.getContent(xmlItem.description[0]);\n            item.contentSnippet = utils.getSnippet(item.content);\n        }\n        if (xmlItem.guid) {\n            item.guid = xmlItem.guid[0];\n            if (item.guid._) item.guid = item.guid._;\n        }\n        if (xmlItem.$ && xmlItem.$[\"rdf:about\"]) {\n            item[\"rdf:about\"] = xmlItem.$[\"rdf:about\"];\n        }\n        if (xmlItem.category) item.categories = xmlItem.category;\n        this.setISODate(item);\n        return item;\n    }\n    /**\n   * Add iTunes specific fields from XML to extracted JSON\n   *\n   * @access public\n   * @param {object} feed extracted\n   * @param {object} channel parsed XML\n   */ decorateItunes(feed, channel) {\n        let items = channel.item || [];\n        let categories = [];\n        feed.itunes = {};\n        if (channel[\"itunes:owner\"]) {\n            let owner = {};\n            if (channel[\"itunes:owner\"][0][\"itunes:name\"]) {\n                owner.name = channel[\"itunes:owner\"][0][\"itunes:name\"][0];\n            }\n            if (channel[\"itunes:owner\"][0][\"itunes:email\"]) {\n                owner.email = channel[\"itunes:owner\"][0][\"itunes:email\"][0];\n            }\n            feed.itunes.owner = owner;\n        }\n        if (channel[\"itunes:image\"]) {\n            let image;\n            let hasImageHref = channel[\"itunes:image\"][0] && channel[\"itunes:image\"][0].$ && channel[\"itunes:image\"][0].$.href;\n            image = hasImageHref ? channel[\"itunes:image\"][0].$.href : null;\n            if (image) {\n                feed.itunes.image = image;\n            }\n        }\n        if (channel[\"itunes:category\"]) {\n            const categoriesWithSubs = channel[\"itunes:category\"].map((category)=>{\n                return {\n                    name: category && category.$ && category.$.text,\n                    subs: category[\"itunes:category\"] ? category[\"itunes:category\"].map((subcategory)=>({\n                            name: subcategory && subcategory.$ && subcategory.$.text\n                        })) : null\n                };\n            });\n            feed.itunes.categories = categoriesWithSubs.map((category)=>category.name);\n            feed.itunes.categoriesWithSubs = categoriesWithSubs;\n        }\n        if (channel[\"itunes:keywords\"]) {\n            if (channel[\"itunes:keywords\"].length > 1) {\n                feed.itunes.keywords = channel[\"itunes:keywords\"].map((keyword)=>keyword && keyword.$ && keyword.$.text);\n            } else {\n                let keywords = channel[\"itunes:keywords\"][0];\n                if (keywords && typeof keywords._ === \"string\") {\n                    keywords = keywords._;\n                }\n                if (keywords && keywords.$ && keywords.$.text) {\n                    feed.itunes.keywords = keywords.$.text.split(\",\");\n                } else if (typeof keywords === \"string\") {\n                    feed.itunes.keywords = keywords.split(\",\");\n                }\n            }\n        }\n        utils.copyFromXML(channel, feed.itunes, fields.podcastFeed);\n        items.forEach((item, index)=>{\n            let entry = feed.items[index];\n            entry.itunes = {};\n            utils.copyFromXML(item, entry.itunes, fields.podcastItem);\n            let image = item[\"itunes:image\"];\n            if (image && image[0] && image[0].$ && image[0].$.href) {\n                entry.itunes.image = image[0].$.href;\n            }\n        });\n    }\n    setISODate(item) {\n        let date = item.pubDate || item.date;\n        if (date) {\n            try {\n                item.isoDate = new Date(date.trim()).toISOString();\n            } catch (e) {\n            // Ignore bad date format\n            }\n        }\n    }\n    /**\n   * Generates a pagination object where the rel attribute is the key and href attribute is the value\n   *  { self: 'self-url', first: 'first-url', ...  }\n   *\n   * @access private\n   * @param {Object} channel parsed XML\n   * @returns {Object}\n   */ generatePaginationLinks(channel) {\n        if (!channel[\"atom:link\"]) {\n            return {};\n        }\n        const paginationRelAttributes = [\n            \"self\",\n            \"first\",\n            \"next\",\n            \"prev\",\n            \"last\"\n        ];\n        return channel[\"atom:link\"].reduce((paginationLinks, link)=>{\n            if (!link.$ || !paginationRelAttributes.includes(link.$.rel)) {\n                return paginationLinks;\n            }\n            paginationLinks[link.$.rel] = link.$.href;\n            return paginationLinks;\n        }, {});\n    }\n}\nmodule.exports = Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcnNzLXBhcnNlci9saWIvcGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsTUFBTUEsT0FBT0MsbUJBQU9BLENBQUM7QUFDckIsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUM7QUFDdEIsTUFBTUUsU0FBU0YsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUcsTUFBTUgsbUJBQU9BLENBQUM7QUFFcEIsTUFBTUksU0FBU0osbUJBQU9BLENBQUM7QUFDdkIsTUFBTUssUUFBUUwsbUJBQU9BLENBQUM7QUFFdEIsTUFBTU0sa0JBQWtCO0lBQ3RCLGNBQWM7SUFDZCxVQUFVO0FBQ1o7QUFDQSxNQUFNQyx3QkFBd0I7QUFDOUIsTUFBTUMsa0JBQWtCO0FBRXhCLE1BQU1DO0lBQ0pDLFlBQVlDLFVBQVEsQ0FBQyxDQUFDLENBQUU7UUFDdEJBLFFBQVFDLE9BQU8sR0FBR0QsUUFBUUMsT0FBTyxJQUFJLENBQUM7UUFDdENELFFBQVFULE1BQU0sR0FBR1MsUUFBUVQsTUFBTSxJQUFJLENBQUM7UUFDcENTLFFBQVFFLFlBQVksR0FBR0YsUUFBUUUsWUFBWSxJQUFJLENBQUM7UUFDaERGLFFBQVFFLFlBQVksQ0FBQ0MsSUFBSSxHQUFHSCxRQUFRRSxZQUFZLENBQUNDLElBQUksSUFBSSxFQUFFO1FBQzNESCxRQUFRRSxZQUFZLENBQUNFLElBQUksR0FBR0osUUFBUUUsWUFBWSxDQUFDRSxJQUFJLElBQUksRUFBRTtRQUMzREosUUFBUUssY0FBYyxHQUFHTCxRQUFRSyxjQUFjLElBQUksQ0FBQztRQUNwRCxJQUFJLENBQUNMLFFBQVFNLFlBQVksRUFBRU4sUUFBUU0sWUFBWSxHQUFHVjtRQUNsRCxJQUFJLENBQUNJLFFBQVFPLE9BQU8sRUFBRVAsUUFBUU8sT0FBTyxHQUFHVjtRQUN4QyxJQUFJLENBQUNHLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNRLFNBQVMsR0FBRyxJQUFJakIsT0FBT08sTUFBTSxDQUFDLElBQUksQ0FBQ0UsT0FBTyxD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QUFFLENBQUNqRSxDQUFDLENBQUNnRSxJQUFJO1lBQ3RDO1FBQ0Y7SUFDRjtJQUVBUCxXQUFXM0UsSUFBSSxFQUFFO1FBQ2YsSUFBSStHLE9BQU8vRyxLQUFLZ0UsT0FBTyxJQUFJaEUsS0FBSytHLElBQUk7UUFDcEMsSUFBSUEsTUFBTTtZQUNSLElBQUk7Z0JBQ0YvRyxLQUFLZ0gsT0FBTyxHQUFHLElBQUkvQyxLQUFLOEMsS0FBS0UsSUFBSSxJQUFJL0MsV0FBVztZQUNsRCxFQUFFLE9BQU9qQixHQUFHO1lBQ1YseUJBQXlCO1lBQzNCO1FBQ0Y7SUFDRjtJQUVBOzs7Ozs7O0dBT0MsR0FDRHNDLHdCQUF3QlgsT0FBTyxFQUFFO1FBQy9CLElBQUksQ0FBQ0EsT0FBTyxDQUFDLFlBQVksRUFBRTtZQUN6QixPQUFPLENBQUM7UUFDVjtRQUNBLE1BQU1zQywwQkFBMEI7WUFBQztZQUFRO1lBQVM7WUFBUTtZQUFRO1NBQU87UUFFekUsT0FBT3RDLE9BQU8sQ0FBQyxZQUFZLENBQUN1QyxNQUFNLENBQUMsQ0FBQzdCLGlCQUFpQmpDO1lBQ25ELElBQUksQ0FBQ0EsS0FBS25DLENBQUMsSUFBSSxDQUFDZ0csd0JBQXdCRSxRQUFRLENBQUMvRCxLQUFLbkMsQ0FBQyxDQUFDbUcsR0FBRyxHQUFHO2dCQUM1RCxPQUFPL0I7WUFDVDtZQUNBQSxlQUFlLENBQUNqQyxLQUFLbkMsQ0FBQyxDQUFDbUcsR0FBRyxDQUFDLEdBQUdoRSxLQUFLbkMsQ0FBQyxDQUFDZ0UsSUFBSTtZQUN6QyxPQUFPSTtRQUNULEdBQUcsQ0FBQztJQUNOO0FBQ0Y7QUFFQWdDLE9BQU9DLE9BQU8sR0FBRzVIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVlLXJvYmluc29uLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9yc3MtcGFyc2VyL2xpYi9wYXJzZXIuanM/ZmQzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5jb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5jb25zdCB4bWwyanMgPSByZXF1aXJlKCd4bWwyanMnKTtcbmNvbnN0IHVybCA9IHJlcXVpcmUoJ3VybCcpO1xuXG5jb25zdCBmaWVsZHMgPSByZXF1aXJlKCcuL2ZpZWxkcycpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbmNvbnN0IERFRkFVTFRfSEVBREVSUyA9IHtcbiAgJ1VzZXItQWdlbnQnOiAncnNzLXBhcnNlcicsXG4gICdBY2NlcHQnOiAnYXBwbGljYXRpb24vcnNzK3htbCcsXG59XG5jb25zdCBERUZBVUxUX01BWF9SRURJUkVDVFMgPSA1O1xuY29uc3QgREVGQVVMVF9USU1FT1VUID0gNjAwMDA7XG5cbmNsYXNzIFBhcnNlciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM9e30pIHtcbiAgICBvcHRpb25zLmhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnMgfHwge307XG4gICAgb3B0aW9ucy54bWwyanMgPSBvcHRpb25zLnhtbDJqcyB8fCB7fTtcbiAgICBvcHRpb25zLmN1c3RvbUZpZWxkcyA9IG9wdGlvbnMuY3VzdG9tRmllbGRzIHx8IHt9O1xuICAgIG9wdGlvbnMuY3VzdG9tRmllbGRzLml0ZW0gPSBvcHRpb25zLmN1c3RvbUZpZWxkcy5pdGVtIHx8IFtdO1xuICAgIG9wdGlvbnMuY3VzdG9tRmllbGRzLmZlZWQgPSBvcHRpb25zLmN1c3RvbUZpZWxkcy5mZWVkIHx8IFtdO1xuICAgIG9wdGlvbnMucmVxdWVzdE9wdGlvbnMgPSBvcHRpb25zLnJlcXVlc3RPcHRpb25zIHx8IHt9O1xuICAgIGlmICghb3B0aW9ucy5tYXhSZWRpcmVjdHMpIG9wdGlvbnMubWF4UmVkaXJlY3RzID0gREVGQVVMVF9NQVhfUkVESVJFQ1RTO1xuICAgIGlmICghb3B0aW9ucy50aW1lb3V0KSBvcHRpb25zLnRpbWVvdXQgPSBERUZBVUxUX1RJTUVPVVQ7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnhtbFBhcnNlciA9IG5ldyB4bWwyanMuUGFyc2VyKHRoaXMub3B0aW9ucy54bWwyanMpO1xuICB9XG5cbiAgcGFyc2VTdHJpbmcoeG1sLCBjYWxsYmFjaykge1xuICAgIGxldCBwcm9tID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy54bWxQYXJzZXIucGFyc2VTdHJpbmcoeG1sLCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKCdVbmFibGUgdG8gcGFyc2UgWE1MLicpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZmVlZCA9IG51bGw7XG4gICAgICAgIGlmIChyZXN1bHQuZmVlZCkge1xuICAgICAgICAgIGZlZWQgPSB0aGlzLmJ1aWxkQXRvbUZlZWQocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQucnNzICYmIHJlc3VsdC5yc3MuJCAmJiByZXN1bHQucnNzLiQudmVyc2lvbiAmJiByZXN1bHQucnNzLiQudmVyc2lvbi5tYXRjaCgvXjIvKSkge1xuICAgICAgICAgIGZlZWQgPSB0aGlzLmJ1aWxkUlNTMihyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdFsncmRmOlJERiddKSB7XG4gICAgICAgICAgZmVlZCA9IHRoaXMuYnVpbGRSU1MxKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LnJzcyAmJiByZXN1bHQucnNzLiQgJiYgcmVzdWx0LnJzcy4kLnZlcnNpb24gJiYgcmVzdWx0LnJzcy4kLnZlcnNpb24ubWF0Y2goLzBcXC45LykpIHtcbiAgICAgICAgICBmZWVkID0gdGhpcy5idWlsZFJTUzBfOShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5yc3MgJiYgdGhpcy5vcHRpb25zLmRlZmF1bHRSU1MpIHtcbiAgICAgICAgICBzd2l0Y2godGhpcy5vcHRpb25zLmRlZmF1bHRSU1MpIHtcbiAgICAgICAgICAgIGNhc2UgMC45OlxuICAgICAgICAgICAgICBmZWVkID0gdGhpcy5idWlsZFJTUzBfOShyZXN1bHQpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgZmVlZCA9IHRoaXMuYnVpbGRSU1MxKHJlc3VsdCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICBmZWVkID0gdGhpcy5idWlsZFJTUzIocmVzdWx0KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcImRlZmF1bHQgUlNTIHZlcnNpb24gbm90IHJlY29nbml6ZWQuXCIpKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcIkZlZWQgbm90IHJlY29nbml6ZWQgYXMgUlNTIDEgb3IgMi5cIikpXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShmZWVkKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHByb20gPSB1dGlscy5tYXliZVByb21pc2lmeShjYWxsYmFjaywgcHJvbSk7XG4gICAgcmV0dXJuIHByb207XG4gIH1cblxuICBwYXJzZVVSTChmZWVkVXJsLCBjYWxsYmFjaywgcmVkaXJlY3RDb3VudD0wKSB7XG4gICAgbGV0IHhtbCA9ICcnO1xuICAgIGxldCBnZXQgPSBmZWVkVXJsLmluZGV4T2YoJ2h0dHBzJykgPT09IDAgPyBodHRwcy5nZXQgOiBodHRwLmdldDtcbiAgICBsZXQgdXJsUGFydHMgPSB1cmwucGFyc2UoZmVlZFVybCk7XG4gICAgbGV0IGhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0hFQURFUlMsIHRoaXMub3B0aW9ucy5oZWFkZXJzKTtcbiAgICBsZXQgdGltZW91dCA9IG51bGw7XG4gICAgbGV0IHByb20gPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCByZXF1ZXN0T3B0cyA9IE9iamVjdC5hc3NpZ24oe2hlYWRlcnN9LCB1cmxQYXJ0cywgdGhpcy5vcHRpb25zLnJlcXVlc3RPcHRpb25zKTtcbiAgICAgIGxldCByZXEgPSBnZXQocmVxdWVzdE9wdHMsIChyZXMpID0+IHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXhSZWRpcmVjdHMgJiYgcmVzLnN0YXR1c0NvZGUgPj0gMzAwICYmIHJlcy5zdGF0dXNDb2RlIDwgNDAwICYmIHJlcy5oZWFkZXJzWydsb2NhdGlvbiddKSB7XG4gICAgICAgICAgaWYgKHJlZGlyZWN0Q291bnQgPT09IHRoaXMub3B0aW9ucy5tYXhSZWRpcmVjdHMpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKFwiVG9vIG1hbnkgcmVkaXJlY3RzXCIpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbmV3TG9jYXRpb24gPSB1cmwucmVzb2x2ZShmZWVkVXJsLCByZXMuaGVhZGVyc1snbG9jYXRpb24nXSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVVSTChuZXdMb2NhdGlvbiwgbnVsbCwgcmVkaXJlY3RDb3VudCArIDEpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocmVzLnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJTdGF0dXMgY29kZSBcIiArIHJlcy5zdGF0dXNDb2RlKSlcbiAgICAgICAgfVxuICAgICAgICBsZXQgZW5jb2RpbmcgPSB1dGlscy5nZXRFbmNvZGluZ0Zyb21Db250ZW50VHlwZShyZXMuaGVhZGVyc1snY29udGVudC10eXBlJ10pO1xuICAgICAgICByZXMuc2V0RW5jb2RpbmcoZW5jb2RpbmcpO1xuICAgICAgICByZXMub24oJ2RhdGEnLCAoY2h1bmspID0+IHtcbiAgICAgICAgICB4bWwgKz0gY2h1bms7XG4gICAgICAgIH0pO1xuICAgICAgICByZXMub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVN0cmluZyh4bWwpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgcmVxLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKFwiUmVxdWVzdCB0aW1lZCBvdXQgYWZ0ZXIgXCIgKyB0aGlzLm9wdGlvbnMudGltZW91dCArIFwibXNcIikpO1xuICAgICAgfSwgdGhpcy5vcHRpb25zLnRpbWVvdXQpO1xuICAgIH0pLnRoZW4oZGF0YSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xuICAgIH0sIGUgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xuICAgIH0pO1xuICAgIHByb20gPSB1dGlscy5tYXliZVByb21pc2lmeShjYWxsYmFjaywgcHJvbSk7XG4gICAgcmV0dXJuIHByb207XG4gIH1cblxuICBidWlsZEF0b21GZWVkKHhtbE9iaikge1xuICAgIGxldCBmZWVkID0ge2l0ZW1zOiBbXX07XG4gICAgdXRpbHMuY29weUZyb21YTUwoeG1sT2JqLmZlZWQsIGZlZWQsIHRoaXMub3B0aW9ucy5jdXN0b21GaWVsZHMuZmVlZCk7XG4gICAgaWYgKHhtbE9iai5mZWVkLmxpbmspIHtcbiAgICAgIGZlZWQubGluayA9IHV0aWxzLmdldExpbmsoeG1sT2JqLmZlZWQubGluaywgJ2FsdGVybmF0ZScsIDApO1xuICAgICAgZmVlZC5mZWVkVXJsID0gdXRpbHMuZ2V0TGluayh4bWxPYmouZmVlZC5saW5rLCAnc2VsZicsIDEpO1xuICAgIH1cbiAgICBpZiAoeG1sT2JqLmZlZWQudGl0bGUpIHtcbiAgICAgIGxldCB0aXRsZSA9IHhtbE9iai5mZWVkLnRpdGxlWzBdIHx8ICcnO1xuICAgICAgaWYgKHRpdGxlLl8pIHRpdGxlID0gdGl0bGUuX1xuICAgICAgaWYgKHRpdGxlKSBmZWVkLnRpdGxlID0gdGl0bGU7XG4gICAgfVxuICAgIGlmICh4bWxPYmouZmVlZC51cGRhdGVkKSB7XG4gICAgICBmZWVkLmxhc3RCdWlsZERhdGUgPSB4bWxPYmouZmVlZC51cGRhdGVkWzBdO1xuICAgIH1cbiAgICBmZWVkLml0ZW1zID0gKHhtbE9iai5mZWVkLmVudHJ5IHx8IFtdKS5tYXAoZW50cnkgPT4gdGhpcy5wYXJzZUl0ZW1BdG9tKGVudHJ5KSk7XG4gICAgcmV0dXJuIGZlZWQ7XG4gIH1cblxuICBwYXJzZUl0ZW1BdG9tKGVudHJ5KSB7XG4gICAgbGV0IGl0ZW0gPSB7fTtcbiAgICB1dGlscy5jb3B5RnJvbVhNTChlbnRyeSwgaXRlbSwgdGhpcy5vcHRpb25zLmN1c3RvbUZpZWxkcy5pdGVtKTtcbiAgICBpZiAoZW50cnkudGl0bGUpIHtcbiAgICAgIGxldCB0aXRsZSA9IGVudHJ5LnRpdGxlWzBdIHx8ICcnO1xuICAgICAgaWYgKHRpdGxlLl8pIHRpdGxlID0gdGl0bGUuXztcbiAgICAgIGlmICh0aXRsZSkgaXRlbS50aXRsZSA9IHRpdGxlO1xuICAgIH1cbiAgICBpZiAoZW50cnkubGluayAmJiBlbnRyeS5saW5rLmxlbmd0aCkge1xuICAgICAgaXRlbS5saW5rID0gdXRpbHMuZ2V0TGluayhlbnRyeS5saW5rLCAnYWx0ZXJuYXRlJywgMCk7XG4gICAgfVxuICAgIGlmIChlbnRyeS5wdWJsaXNoZWQgJiYgZW50cnkucHVibGlzaGVkLmxlbmd0aCAmJiBlbnRyeS5wdWJsaXNoZWRbMF0ubGVuZ3RoKSBpdGVtLnB1YkRhdGUgPSBuZXcgRGF0ZShlbnRyeS5wdWJsaXNoZWRbMF0pLnRvSVNPU3RyaW5nKCk7XG4gICAgaWYgKCFpdGVtLnB1YkRhdGUgJiYgZW50cnkudXBkYXRlZCAmJiBlbnRyeS51cGRhdGVkLmxlbmd0aCAmJiBlbnRyeS51cGRhdGVkWzBdLmxlbmd0aCkgaXRlbS5wdWJEYXRlID0gbmV3IERhdGUoZW50cnkudXBkYXRlZFswXSkudG9JU09TdHJpbmcoKTtcbiAgICBpZiAoZW50cnkuYXV0aG9yICYmIGVudHJ5LmF1dGhvci5sZW5ndGggJiYgZW50cnkuYXV0aG9yWzBdLm5hbWUgJiYgZW50cnkuYXV0aG9yWzBdLm5hbWUubGVuZ3RoKSBpdGVtLmF1dGhvciA9IGVudHJ5LmF1dGhvclswXS5uYW1lWzBdO1xuICAgIGlmIChlbnRyeS5jb250ZW50ICYmIGVudHJ5LmNvbnRlbnQubGVuZ3RoKSB7XG4gICAgICBpdGVtLmNvbnRlbnQgPSB1dGlscy5nZXRDb250ZW50KGVudHJ5LmNvbnRlbnRbMF0pO1xuICAgICAgaXRlbS5jb250ZW50U25pcHBldCA9IHV0aWxzLmdldFNuaXBwZXQoaXRlbS5jb250ZW50KVxuICAgIH1cbiAgICBpZiAoZW50cnkuc3VtbWFyeSAmJiBlbnRyeS5zdW1tYXJ5Lmxlbmd0aCkge1xuICAgICAgaXRlbS5zdW1tYXJ5ID0gdXRpbHMuZ2V0Q29udGVudChlbnRyeS5zdW1tYXJ5WzBdKTtcbiAgICB9XG4gICAgaWYgKGVudHJ5LmlkKSB7XG4gICAgICBpdGVtLmlkID0gZW50cnkuaWRbMF07XG4gICAgfVxuICAgIHRoaXMuc2V0SVNPRGF0ZShpdGVtKTtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIGJ1aWxkUlNTMF85KHhtbE9iaikge1xuICAgIHZhciBjaGFubmVsID0geG1sT2JqLnJzcy5jaGFubmVsWzBdO1xuICAgIHZhciBpdGVtcyA9IGNoYW5uZWwuaXRlbTtcbiAgICByZXR1cm4gdGhpcy5idWlsZFJTUyhjaGFubmVsLCBpdGVtcyk7XG4gIH1cblxuICBidWlsZFJTUzEoeG1sT2JqKSB7XG4gICAgeG1sT2JqID0geG1sT2JqWydyZGY6UkRGJ107XG4gICAgbGV0IGNoYW5uZWwgPSB4bWxPYmouY2hhbm5lbFswXTtcbiAgICBsZXQgaXRlbXMgPSB4bWxPYmouaXRlbTtcbiAgICByZXR1cm4gdGhpcy5idWlsZFJTUyhjaGFubmVsLCBpdGVtcyk7XG4gIH1cblxuICBidWlsZFJTUzIoeG1sT2JqKSB7XG4gICAgbGV0IGNoYW5uZWwgPSB4bWxPYmoucnNzLmNoYW5uZWxbMF07XG4gICAgbGV0IGl0ZW1zID0gY2hhbm5lbC5pdGVtO1xuICAgIGxldCBmZWVkID0gdGhpcy5idWlsZFJTUyhjaGFubmVsLCBpdGVtcyk7XG4gICAgaWYgKHhtbE9iai5yc3MuJCAmJiB4bWxPYmoucnNzLiRbJ3htbG5zOml0dW5lcyddKSB7XG4gICAgICB0aGlzLmRlY29yYXRlSXR1bmVzKGZlZWQsIGNoYW5uZWwpO1xuICAgIH1cbiAgICByZXR1cm4gZmVlZDtcbiAgfVxuXG4gIGJ1aWxkUlNTKGNoYW5uZWwsIGl0ZW1zKSB7XG4gICAgaXRlbXMgPSBpdGVtcyB8fCBbXTtcbiAgICBsZXQgZmVlZCA9IHtpdGVtczogW119O1xuICAgIGxldCBmZWVkRmllbGRzID0gZmllbGRzLmZlZWQuY29uY2F0KHRoaXMub3B0aW9ucy5jdXN0b21GaWVsZHMuZmVlZCk7XG4gICAgbGV0IGl0ZW1GaWVsZHMgPSBmaWVsZHMuaXRlbS5jb25jYXQodGhpcy5vcHRpb25zLmN1c3RvbUZpZWxkcy5pdGVtKTtcbiAgICBpZiAoY2hhbm5lbFsnYXRvbTpsaW5rJ10gJiYgY2hhbm5lbFsnYXRvbTpsaW5rJ11bMF0gJiYgY2hhbm5lbFsnYXRvbTpsaW5rJ11bMF0uJCkge1xuICAgICAgZmVlZC5mZWVkVXJsID0gY2hhbm5lbFsnYXRvbTpsaW5rJ11bMF0uJC5ocmVmO1xuICAgIH1cbiAgICBpZiAoY2hhbm5lbC5pbWFnZSAmJiBjaGFubmVsLmltYWdlWzBdICYmIGNoYW5uZWwuaW1hZ2VbMF0udXJsKSB7XG4gICAgICBmZWVkLmltYWdlID0ge307XG4gICAgICBsZXQgaW1hZ2UgPSBjaGFubmVsLmltYWdlWzBdO1xuICAgICAgaWYgKGltYWdlLmxpbmspIGZlZWQuaW1hZ2UubGluayA9IGltYWdlLmxpbmtbMF07XG4gICAgICBpZiAoaW1hZ2UudXJsKSBmZWVkLmltYWdlLnVybCA9IGltYWdlLnVybFswXTtcbiAgICAgIGlmIChpbWFnZS50aXRsZSkgZmVlZC5pbWFnZS50aXRsZSA9IGltYWdlLnRpdGxlWzBdO1xuICAgICAgaWYgKGltYWdlLndpZHRoKSBmZWVkLmltYWdlLndpZHRoID0gaW1hZ2Uud2lkdGhbMF07XG4gICAgICBpZiAoaW1hZ2UuaGVpZ2h0KSBmZWVkLmltYWdlLmhlaWdodCA9IGltYWdlLmhlaWdodFswXTtcbiAgICB9XG4gICAgY29uc3QgcGFnaW5hdGlvbkxpbmtzID0gdGhpcy5nZW5lcmF0ZVBhZ2luYXRpb25MaW5rcyhjaGFubmVsKTtcbiAgICBpZiAoT2JqZWN0LmtleXMocGFnaW5hdGlvbkxpbmtzKS5sZW5ndGgpIHtcbiAgICAgIGZlZWQucGFnaW5hdGlvbkxpbmtzID0gcGFnaW5hdGlvbkxpbmtzO1xuICAgIH1cbiAgICB1dGlscy5jb3B5RnJvbVhNTChjaGFubmVsLCBmZWVkLCBmZWVkRmllbGRzKTtcbiAgICBmZWVkLml0ZW1zID0gaXRlbXMubWFwKHhtbEl0ZW0gPT4gdGhpcy5wYXJzZUl0ZW1Sc3MoeG1sSXRlbSwgaXRlbUZpZWxkcykpO1xuICAgIHJldHVybiBmZWVkO1xuICB9XG5cbiAgcGFyc2VJdGVtUnNzKHhtbEl0ZW0sIGl0ZW1GaWVsZHMpIHtcbiAgICBsZXQgaXRlbSA9IHt9O1xuICAgIHV0aWxzLmNvcHlGcm9tWE1MKHhtbEl0ZW0sIGl0ZW0sIGl0ZW1GaWVsZHMpO1xuICAgIGlmICh4bWxJdGVtLmVuY2xvc3VyZSkge1xuICAgICAgaXRlbS5lbmNsb3N1cmUgPSB4bWxJdGVtLmVuY2xvc3VyZVswXS4kO1xuICAgIH1cbiAgICBpZiAoeG1sSXRlbS5kZXNjcmlwdGlvbikge1xuICAgICAgaXRlbS5jb250ZW50ID0gdXRpbHMuZ2V0Q29udGVudCh4bWxJdGVtLmRlc2NyaXB0aW9uWzBdKTtcbiAgICAgIGl0ZW0uY29udGVudFNuaXBwZXQgPSB1dGlscy5nZXRTbmlwcGV0KGl0ZW0uY29udGVudCk7XG4gICAgfVxuICAgIGlmICh4bWxJdGVtLmd1aWQpIHtcbiAgICAgIGl0ZW0uZ3VpZCA9IHhtbEl0ZW0uZ3VpZFswXTtcbiAgICAgIGlmIChpdGVtLmd1aWQuXykgaXRlbS5ndWlkID0gaXRlbS5ndWlkLl87XG4gICAgfVxuICAgIGlmICh4bWxJdGVtLiQgJiYgeG1sSXRlbS4kWydyZGY6YWJvdXQnXSkge1xuICAgICAgaXRlbVsncmRmOmFib3V0J10gPSB4bWxJdGVtLiRbJ3JkZjphYm91dCddXG4gICAgfVxuICAgIGlmICh4bWxJdGVtLmNhdGVnb3J5KSBpdGVtLmNhdGVnb3JpZXMgPSB4bWxJdGVtLmNhdGVnb3J5O1xuICAgIHRoaXMuc2V0SVNPRGF0ZShpdGVtKTtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgaVR1bmVzIHNwZWNpZmljIGZpZWxkcyBmcm9tIFhNTCB0byBleHRyYWN0ZWQgSlNPTlxuICAgKlxuICAgKiBAYWNjZXNzIHB1YmxpY1xuICAgKiBAcGFyYW0ge29iamVjdH0gZmVlZCBleHRyYWN0ZWRcbiAgICogQHBhcmFtIHtvYmplY3R9IGNoYW5uZWwgcGFyc2VkIFhNTFxuICAgKi9cbiAgZGVjb3JhdGVJdHVuZXMoZmVlZCwgY2hhbm5lbCkge1xuICAgIGxldCBpdGVtcyA9IGNoYW5uZWwuaXRlbSB8fCBbXTtcbiAgICBsZXQgY2F0ZWdvcmllcyA9IFtdO1xuICAgIGZlZWQuaXR1bmVzID0ge31cblxuICAgIGlmIChjaGFubmVsWydpdHVuZXM6b3duZXInXSkge1xuICAgICAgbGV0IG93bmVyID0ge307XG5cbiAgICAgIGlmKGNoYW5uZWxbJ2l0dW5lczpvd25lciddWzBdWydpdHVuZXM6bmFtZSddKSB7XG4gICAgICAgIG93bmVyLm5hbWUgPSBjaGFubmVsWydpdHVuZXM6b3duZXInXVswXVsnaXR1bmVzOm5hbWUnXVswXTtcbiAgICAgIH1cbiAgICAgIGlmKGNoYW5uZWxbJ2l0dW5lczpvd25lciddWzBdWydpdHVuZXM6ZW1haWwnXSkge1xuICAgICAgICBvd25lci5lbWFpbCA9IGNoYW5uZWxbJ2l0dW5lczpvd25lciddWzBdWydpdHVuZXM6ZW1haWwnXVswXTtcbiAgICAgIH1cbiAgICAgIGZlZWQuaXR1bmVzLm93bmVyID0gb3duZXI7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5uZWxbJ2l0dW5lczppbWFnZSddKSB7XG4gICAgICBsZXQgaW1hZ2U7XG4gICAgICBsZXQgaGFzSW1hZ2VIcmVmID0gKGNoYW5uZWxbJ2l0dW5lczppbWFnZSddWzBdICYmXG4gICAgICAgIGNoYW5uZWxbJ2l0dW5lczppbWFnZSddWzBdLiQgJiZcbiAgICAgICAgY2hhbm5lbFsnaXR1bmVzOmltYWdlJ11bMF0uJC5ocmVmKTtcbiAgICAgIGltYWdlID0gaGFzSW1hZ2VIcmVmID8gY2hhbm5lbFsnaXR1bmVzOmltYWdlJ11bMF0uJC5ocmVmIDogbnVsbDtcbiAgICAgIGlmIChpbWFnZSkge1xuICAgICAgICBmZWVkLml0dW5lcy5pbWFnZSA9IGltYWdlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjaGFubmVsWydpdHVuZXM6Y2F0ZWdvcnknXSkge1xuICAgICAgY29uc3QgY2F0ZWdvcmllc1dpdGhTdWJzID0gY2hhbm5lbFsnaXR1bmVzOmNhdGVnb3J5J10ubWFwKChjYXRlZ29yeSkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWU6IGNhdGVnb3J5ICYmIGNhdGVnb3J5LiQgJiYgY2F0ZWdvcnkuJC50ZXh0LFxuICAgICAgICAgIHN1YnM6IGNhdGVnb3J5WydpdHVuZXM6Y2F0ZWdvcnknXSA/XG4gICAgICAgICAgICBjYXRlZ29yeVsnaXR1bmVzOmNhdGVnb3J5J11cbiAgICAgICAgICAgICAgLm1hcCgoc3ViY2F0ZWdvcnkpID0+ICh7XG4gICAgICAgICAgICAgICAgbmFtZTogc3ViY2F0ZWdvcnkgJiYgc3ViY2F0ZWdvcnkuJCAmJiBzdWJjYXRlZ29yeS4kLnRleHRcbiAgICAgICAgICAgICAgfSkpIDogbnVsbCxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuXG4gICAgICBmZWVkLml0dW5lcy5jYXRlZ29yaWVzID0gY2F0ZWdvcmllc1dpdGhTdWJzLm1hcCgoY2F0ZWdvcnkpID0+IGNhdGVnb3J5Lm5hbWUpO1xuICAgICAgZmVlZC5pdHVuZXMuY2F0ZWdvcmllc1dpdGhTdWJzID0gY2F0ZWdvcmllc1dpdGhTdWJzO1xuICAgIH1cblxuICAgIGlmIChjaGFubmVsWydpdHVuZXM6a2V5d29yZHMnXSkge1xuICAgICAgaWYgKGNoYW5uZWxbJ2l0dW5lczprZXl3b3JkcyddLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZmVlZC5pdHVuZXMua2V5d29yZHMgPSBjaGFubmVsWydpdHVuZXM6a2V5d29yZHMnXS5tYXAoXG4gICAgICAgICAga2V5d29yZCA9PiBrZXl3b3JkICYmIGtleXdvcmQuJCAmJiBrZXl3b3JkLiQudGV4dFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGtleXdvcmRzID0gY2hhbm5lbFsnaXR1bmVzOmtleXdvcmRzJ11bMF07XG4gICAgICAgIGlmIChrZXl3b3JkcyAmJiB0eXBlb2Yga2V5d29yZHMuXyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBrZXl3b3JkcyA9IGtleXdvcmRzLl87XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5d29yZHMgJiYga2V5d29yZHMuJCAmJiBrZXl3b3Jkcy4kLnRleHQpIHtcbiAgICAgICAgICBmZWVkLml0dW5lcy5rZXl3b3JkcyA9IGtleXdvcmRzLiQudGV4dC5zcGxpdCgnLCcpXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGtleXdvcmRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgZmVlZC5pdHVuZXMua2V5d29yZHMgPSBrZXl3b3Jkcy5zcGxpdCgnLCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXRpbHMuY29weUZyb21YTUwoY2hhbm5lbCwgZmVlZC5pdHVuZXMsIGZpZWxkcy5wb2RjYXN0RmVlZCk7XG4gICAgaXRlbXMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGxldCBlbnRyeSA9IGZlZWQuaXRlbXNbaW5kZXhdO1xuICAgICAgZW50cnkuaXR1bmVzID0ge307XG4gICAgICB1dGlscy5jb3B5RnJvbVhNTChpdGVtLCBlbnRyeS5pdHVuZXMsIGZpZWxkcy5wb2RjYXN0SXRlbSk7XG4gICAgICBsZXQgaW1hZ2UgPSBpdGVtWydpdHVuZXM6aW1hZ2UnXTtcbiAgICAgIGlmIChpbWFnZSAmJiBpbWFnZVswXSAmJiBpbWFnZVswXS4kICYmIGltYWdlWzBdLiQuaHJlZikge1xuICAgICAgICBlbnRyeS5pdHVuZXMuaW1hZ2UgPSBpbWFnZVswXS4kLmhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzZXRJU09EYXRlKGl0ZW0pIHtcbiAgICBsZXQgZGF0ZSA9IGl0ZW0ucHViRGF0ZSB8fCBpdGVtLmRhdGU7XG4gICAgaWYgKGRhdGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGl0ZW0uaXNvRGF0ZSA9IG5ldyBEYXRlKGRhdGUudHJpbSgpKS50b0lTT1N0cmluZygpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBJZ25vcmUgYmFkIGRhdGUgZm9ybWF0XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIHBhZ2luYXRpb24gb2JqZWN0IHdoZXJlIHRoZSByZWwgYXR0cmlidXRlIGlzIHRoZSBrZXkgYW5kIGhyZWYgYXR0cmlidXRlIGlzIHRoZSB2YWx1ZVxuICAgKiAgeyBzZWxmOiAnc2VsZi11cmwnLCBmaXJzdDogJ2ZpcnN0LXVybCcsIC4uLiAgfVxuICAgKlxuICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNoYW5uZWwgcGFyc2VkIFhNTFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgZ2VuZXJhdGVQYWdpbmF0aW9uTGlua3MoY2hhbm5lbCkge1xuICAgIGlmICghY2hhbm5lbFsnYXRvbTpsaW5rJ10pIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgY29uc3QgcGFnaW5hdGlvblJlbEF0dHJpYnV0ZXMgPSBbJ3NlbGYnLCAnZmlyc3QnLCAnbmV4dCcsICdwcmV2JywgJ2xhc3QnXTtcblxuICAgIHJldHVybiBjaGFubmVsWydhdG9tOmxpbmsnXS5yZWR1Y2UoKHBhZ2luYXRpb25MaW5rcywgbGluaykgPT4ge1xuICAgICAgaWYgKCFsaW5rLiQgfHwgIXBhZ2luYXRpb25SZWxBdHRyaWJ1dGVzLmluY2x1ZGVzKGxpbmsuJC5yZWwpKSB7XG4gICAgICAgIHJldHVybiBwYWdpbmF0aW9uTGlua3M7XG4gICAgICB9XG4gICAgICBwYWdpbmF0aW9uTGlua3NbbGluay4kLnJlbF0gPSBsaW5rLiQuaHJlZjtcbiAgICAgIHJldHVybiBwYWdpbmF0aW9uTGlua3M7XG4gICAgfSwge30pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGFyc2VyO1xuIl0sIm5hbWVzIjpbImh0dHAiLCJyZXF1aXJlIiwiaHR0cHMiLCJ4bWwyanMiLCJ1cmwiLCJmaWVsZHMiLCJ1dGlscyIsIkRFRkFVTFRfSEVBREVSUyIsIkRFRkFVTFRfTUFYX1JFRElSRUNUUyIsIkRFRkFVTFRfVElNRU9VVCIsIlBhcnNlciIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImhlYWRlcnMiLCJjdXN0b21GaWVsZHMiLCJpdGVtIiwiZmVlZCIsInJlcXVlc3RPcHRpb25zIiwibWF4UmVkaXJlY3RzIiwidGltZW91dCIsInhtbFBhcnNlciIsInBhcnNlU3RyaW5nIiwieG1sIiwiY2FsbGJhY2siLCJwcm9tIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcnIiLCJyZXN1bHQiLCJFcnJvciIsImJ1aWxkQXRvbUZlZWQiLCJyc3MiLCIkIiwidmVyc2lvbiIsIm1hdGNoIiwiYnVpbGRSU1MyIiwiYnVpbGRSU1MxIiwiYnVpbGRSU1MwXzkiLCJkZWZhdWx0UlNTIiwibWF5YmVQcm9taXNpZnkiLCJwYXJzZVVSTCIsImZlZWRVcmwiLCJyZWRpcmVjdENvdW50IiwiZ2V0IiwiaW5kZXhPZiIsInVybFBhcnRzIiwicGFyc2UiLCJPYmplY3QiLCJhc3NpZ24iLCJyZXF1ZXN0T3B0cyIsInJlcSIsInJlcyIsInN0YXR1c0NvZGUiLCJuZXdMb2NhdGlvbiIsInRoZW4iLCJlbmNvZGluZyIsImdldEVuY29kaW5nRnJvbUNvbnRlbnRUeXBlIiwic2V0RW5jb2RpbmciLCJvbiIsImNodW5rIiwic2V0VGltZW91dCIsImRhdGEiLCJjbGVhclRpbWVvdXQiLCJlIiwieG1sT2JqIiwiaXRlbXMiLCJjb3B5RnJvbVhNTCIsImxpbmsiLCJnZXRMaW5rIiwidGl0bGUiLCJfIiwidXBkYXRlZCIsImxhc3RCdWlsZERhdGUiLCJlbnRyeSIsIm1hcCIsInBhcnNlSXRlbUF0b20iLCJsZW5ndGgiLCJwdWJsaXNoZWQiLCJwdWJEYXRlIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiYXV0aG9yIiwibmFtZSIsImNvbnRlbnQiLCJnZXRDb250ZW50IiwiY29udGVudFNuaXBwZXQiLCJnZXRTbmlwcGV0Iiwic3VtbWFyeSIsImlkIiwic2V0SVNPRGF0ZSIsImNoYW5uZWwiLCJidWlsZFJTUyIsImRlY29yYXRlSXR1bmVzIiwiZmVlZEZpZWxkcyIsImNvbmNhdCIsIml0ZW1GaWVsZHMiLCJocmVmIiwiaW1hZ2UiLCJ3aWR0aCIsImhlaWdodCIsInBhZ2luYXRpb25MaW5rcyIsImdlbmVyYXRlUGFnaW5hdGlvbkxpbmtzIiwia2V5cyIsInhtbEl0ZW0iLCJwYXJzZUl0ZW1Sc3MiLCJlbmNsb3N1cmUiLCJkZXNjcmlwdGlvbiIsImd1aWQiLCJjYXRlZ29yeSIsImNhdGVnb3JpZXMiLCJpdHVuZXMiLCJvd25lciIsImVtYWlsIiwiaGFzSW1hZ2VIcmVmIiwiY2F0ZWdvcmllc1dpdGhTdWJzIiwidGV4dCIsInN1YnMiLCJzdWJjYXRlZ29yeSIsImtleXdvcmRzIiwia2V5d29yZCIsInNwbGl0IiwicG9kY2FzdEZlZWQiLCJmb3JFYWNoIiwiaW5kZXgiLCJwb2RjYXN0SXRlbSIsImRhdGUiLCJpc29EYXRlIiwidHJpbSIsInBhZ2luYXRpb25SZWxBdHRyaWJ1dGVzIiwicmVkdWNlIiwiaW5jbHVkZXMiLCJyZWwiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/rss-parser/lib/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/rss-parser/lib/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/rss-parser/lib/utils.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst utils = module.exports = {};\nconst entities = __webpack_require__(/*! entities */ \"(rsc)/./node_modules/entities/lib/index.js\");\nconst xml2js = __webpack_require__(/*! xml2js */ \"(rsc)/./node_modules/xml2js/lib/xml2js.js\");\nutils.stripHtml = function(str) {\n    str = str.replace(/([^\\n])<\\/?(h|br|p|ul|ol|li|blockquote|section|table|tr|div)(?:.|\\n)*?>([^\\n])/gm, \"$1\\n$3\");\n    str = str.replace(/<(?:.|\\n)*?>/gm, \"\");\n    return str;\n};\nutils.getSnippet = function(str) {\n    return entities.decodeHTML(utils.stripHtml(str)).trim();\n};\nutils.getLink = function(links, rel, fallbackIdx) {\n    if (!links) return;\n    for(let i = 0; i < links.length; ++i){\n        if (links[i].$.rel === rel) return links[i].$.href;\n    }\n    if (links[fallbackIdx]) return links[fallbackIdx].$.href;\n};\nutils.getContent = function(content) {\n    if (typeof content._ === \"string\") {\n        return content._;\n    } else if (typeof content === \"object\") {\n        let builder = new xml2js.Builder({\n            headless: true,\n            explicitRoot: true,\n            rootName: \"div\",\n            renderOpts: {\n                pretty: false\n            }\n        });\n        return builder.buildObject(content);\n    } else {\n        return content;\n    }\n};\nutils.copyFromXML = function(xml, dest, fields) {\n    fields.forEach(function(f) {\n        let from = f;\n        let to = f;\n        let options = {};\n        if (Array.isArray(f)) {\n            from = f[0];\n            to = f[1];\n            if (f.length > 2) {\n                options = f[2];\n            }\n        }\n        const { keepArray, includeSnippet } = options;\n        if (xml[from] !== undefined) {\n            dest[to] = keepArray ? xml[from] : xml[from][0];\n        }\n        if (dest[to] && typeof dest[to]._ === \"string\") {\n            dest[to] = dest[to]._;\n        }\n        if (includeSnippet && dest[to] && typeof dest[to] === \"string\") {\n            dest[to + \"Snippet\"] = utils.getSnippet(dest[to]);\n        }\n    });\n};\nutils.maybePromisify = function(callback, promise) {\n    if (!callback) return promise;\n    return promise.then((data)=>setTimeout(()=>callback(null, data)), (err)=>setTimeout(()=>callback(err)));\n};\nconst DEFAULT_ENCODING = \"utf8\";\nconst ENCODING_REGEX = /(encoding|charset)\\s*=\\s*(\\S+)/;\nconst SUPPORTED_ENCODINGS = [\n    \"ascii\",\n    \"utf8\",\n    \"utf16le\",\n    \"ucs2\",\n    \"base64\",\n    \"latin1\",\n    \"binary\",\n    \"hex\"\n];\nconst ENCODING_ALIASES = {\n    \"utf-8\": \"utf8\",\n    \"iso-8859-1\": \"latin1\"\n};\nutils.getEncodingFromContentType = function(contentType) {\n    contentType = contentType || \"\";\n    let match = contentType.match(ENCODING_REGEX);\n    let encoding = (match || [])[2] || \"\";\n    encoding = encoding.toLowerCase();\n    encoding = ENCODING_ALIASES[encoding] || encoding;\n    if (!encoding || SUPPORTED_ENCODINGS.indexOf(encoding) === -1) {\n        encoding = DEFAULT_ENCODING;\n    }\n    return encoding;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcnNzLXBhcnNlci9saWIvdXRpbHMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFFBQVFDLE9BQU9DLE9BQU8sR0FBRyxDQUFDO0FBQ2hDLE1BQU1DLFdBQVdDLG1CQUFPQSxDQUFDO0FBQ3pCLE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDO0FBRXZCSixNQUFNTSxTQUFTLEdBQUcsU0FBU0MsR0FBRztJQUM1QkEsTUFBTUEsSUFBSUMsT0FBTyxDQUFDLG9GQUFvRjtJQUN0R0QsTUFBTUEsSUFBSUMsT0FBTyxDQUFDLGtCQUFrQjtJQUNwQyxPQUFPRDtBQUNUO0FBRUFQLE1BQU1TLFVBQVUsR0FBRyxTQUFTRixHQUFHO0lBQzdCLE9BQU9KLFNBQVNPLFVBQVUsQ0FBQ1YsTUFBTU0sU0FBUyxDQUFDQyxNQUFNSSxJQUFJO0FBQ3ZEO0FBRUFYLE1BQU1ZLE9BQU8sR0FBRyxTQUFTQyxLQUFLLEVBQUVDLEdBQUcsRUFBRUMsV0FBVztJQUM5QyxJQUFJLENBQUNGLE9BQU87SUFDWixJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUgsTUFBTUksTUFBTSxFQUFFLEVBQUVELEVBQUc7UUFDckMsSUFBSUgsS0FBSyxDQUFDRyxFQUFFLENBQUNFLENBQUMsQ0FBQ0osR0FBRyxLQUFLQSxLQUFLLE9BQU9ELEtBQUssQ0FBQ0csRUFBRSxDQUFDRSxDQUFDLENBQUNDLElBQUk7SUFDcEQ7SUFDQSxJQUFJTixLQUFLLENBQUNFLFlBQVksRUFBRSxPQUFPRixLQUFLLENBQUNFLFlBQVksQ0FBQ0csQ0FBQyxDQUFDQyxJQUFJO0FBQzFEO0FBRUFuQixNQUFNb0IsVUFBVSxHQUFHLFNBQVNDLE9BQU87SUFDakMsSUFBSSxPQUFPQSxRQUFRQyxDQUFDLEtBQUssVUFBVTtRQUNqQyxPQUFPRCxRQUFRQyxDQUFDO0lBQ2xCLE9BQU8sSUFBSSxPQUFPRCxZQUFZLFVBQVU7UUFDdEMsSUFBSUUsVUFBVSxJQUFJbEIsT0FBT21CLE9BQU8sQ0FBQztZQUFDQyxVQUFVO1lBQU1DLGNBQWM7WUFBTUMsVUFBVTtZQUFPQyxZQUFZO2dCQUFDQyxRQUFRO1lBQUs7UUFBQztRQUNsSCxPQUFPTixRQUFRTyxXQUFXLENBQUNUO0lBQzdCLE9BQU87UUFDTCxPQUFPQTtJQUNUO0FBQ0Y7QUFFQXJCLE1BQU0rQixXQUFXLEdBQUcsU0FBU0MsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLE1BQU07SUFDNUNBLE9BQU9DLE9BQU8sQ0FBQyxTQUFTQyxDQUFDO1FBQ3ZCLElBQUlDLE9BQU9EO1FBQ1gsSUFBSUUsS0FBS0Y7UUFDVCxJQUFJRyxVQUFVLENBQUM7UUFDZixJQUFJQyxNQUFNQyxPQUFPLENBQUNMLElBQUk7WUFDcEJDLE9BQU9ELENBQUMsQ0FBQyxFQUFFO1lBQ1hFLEtBQUtGLENBQUMsQ0FBQyxFQUFFO1lBQ1QsSUFBSUEsRUFBRW5CLE1BQU0sR0FBRyxHQUFHO2dCQUNoQnNCLFVBQVVILENBQUMsQ0FBQyxFQUFFO1lBQ2hCO1FBQ0Y7UUFDQSxNQUFNLEVBQUVNLFNBQVMsRUFBRUMsY0FBYyxFQUFFLEdBQUdKO1FBQ3RDLElBQUlQLEdBQUcsQ0FBQ0ssS0FBSyxLQUFLTyxXQUFVO1lBQzFCWCxJQUFJLENBQUNLLEdBQUcsR0FBR0ksWUFBWVYsR0FBRyxDQUFDSyxLQUFLLEdBQUdMLEdBQUcsQ0FBQ0ssS0FBSyxDQUFDLEVBQUU7UUFDakQ7UUFDQSxJQUFJSixJQUFJLENBQUNLLEdBQUcsSUFBSSxPQUFPTCxJQUFJLENBQUNLLEdBQUcsQ0FBQ2hCLENBQUMsS0FBSyxVQUFVO1lBQzlDVyxJQUFJLENBQUNLLEdBQUcsR0FBQ0wsSUFBSSxDQUFDSyxHQUFHLENBQUNoQixDQUFDO1FBQ3JCO1FBQ0EsSUFBSXFCLGtCQUFrQlYsSUFBSSxDQUFDSyxHQUFHLElBQUksT0FBT0wsSUFBSSxDQUFDSyxHQUFHLEtBQUssVUFBVTtZQUM5REwsSUFBSSxDQUFDSyxLQUFLLFVBQVUsR0FBR3RDLE1BQU1TLFVBQVUsQ0FBQ3dCLElBQUksQ0FBQ0ssR0FBRztRQUNsRDtJQUNGO0FBQ0Y7QUFFQXRDLE1BQU02QyxjQUFjLEdBQUcsU0FBU0MsUUFBUSxFQUFFQyxPQUFPO0lBQy9DLElBQUksQ0FBQ0QsVUFBVSxPQUFPQztJQUN0QixPQUFPQSxRQUFRQyxJQUFJLENBQ2pCQyxDQUFBQSxPQUFRQyxXQUFXLElBQU1KLFNBQVMsTUFBTUcsUUFDeENFLENBQUFBLE1BQU9ELFdBQVcsSUFBTUosU0FBU0s7QUFFckM7QUFFQSxNQUFNQyxtQkFBbUI7QUFDekIsTUFBTUMsaUJBQWlCO0FBQ3ZCLE1BQU1DLHNCQUFzQjtJQUFDO0lBQVM7SUFBUTtJQUFXO0lBQVE7SUFBVTtJQUFVO0lBQVU7Q0FBTTtBQUNyRyxNQUFNQyxtQkFBbUI7SUFDdkIsU0FBUztJQUNULGNBQWM7QUFDaEI7QUFFQXZELE1BQU13RCwwQkFBMEIsR0FBRyxTQUFTQyxXQUFXO0lBQ3JEQSxjQUFjQSxlQUFlO0lBQzdCLElBQUlDLFFBQVFELFlBQVlDLEtBQUssQ0FBQ0w7SUFDOUIsSUFBSU0sV0FBVyxDQUFDRCxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSTtJQUNuQ0MsV0FBV0EsU0FBU0MsV0FBVztJQUMvQkQsV0FBV0osZ0JBQWdCLENBQUNJLFNBQVMsSUFBSUE7SUFDekMsSUFBSSxDQUFDQSxZQUFZTCxvQkFBb0JPLE9BQU8sQ0FBQ0YsY0FBYyxDQUFDLEdBQUc7UUFDN0RBLFdBQVdQO0lBQ2I7SUFDQSxPQUFPTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVlLXJvYmluc29uLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9yc3MtcGFyc2VyL2xpYi91dGlscy5qcz81NDVjIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWxzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcbmNvbnN0IGVudGl0aWVzID0gcmVxdWlyZSgnZW50aXRpZXMnKTtcbmNvbnN0IHhtbDJqcyA9IHJlcXVpcmUoJ3htbDJqcycpO1xuXG51dGlscy5zdHJpcEh0bWwgPSBmdW5jdGlvbihzdHIpIHtcbiAgc3RyID0gc3RyLnJlcGxhY2UoLyhbXlxcbl0pPFxcLz8oaHxicnxwfHVsfG9sfGxpfGJsb2NrcXVvdGV8c2VjdGlvbnx0YWJsZXx0cnxkaXYpKD86LnxcXG4pKj8+KFteXFxuXSkvZ20sICckMVxcbiQzJylcbiAgc3RyID0gc3RyLnJlcGxhY2UoLzwoPzoufFxcbikqPz4vZ20sICcnKTtcbiAgcmV0dXJuIHN0cjtcbn1cblxudXRpbHMuZ2V0U25pcHBldCA9IGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gZW50aXRpZXMuZGVjb2RlSFRNTCh1dGlscy5zdHJpcEh0bWwoc3RyKSkudHJpbSgpO1xufVxuXG51dGlscy5nZXRMaW5rID0gZnVuY3Rpb24obGlua3MsIHJlbCwgZmFsbGJhY2tJZHgpIHtcbiAgaWYgKCFsaW5rcykgcmV0dXJuO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmtzLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGxpbmtzW2ldLiQucmVsID09PSByZWwpIHJldHVybiBsaW5rc1tpXS4kLmhyZWY7XG4gIH1cbiAgaWYgKGxpbmtzW2ZhbGxiYWNrSWR4XSkgcmV0dXJuIGxpbmtzW2ZhbGxiYWNrSWR4XS4kLmhyZWY7XG59XG5cbnV0aWxzLmdldENvbnRlbnQgPSBmdW5jdGlvbihjb250ZW50KSB7XG4gIGlmICh0eXBlb2YgY29udGVudC5fID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBjb250ZW50Ll87XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdvYmplY3QnKSB7XG4gICAgbGV0IGJ1aWxkZXIgPSBuZXcgeG1sMmpzLkJ1aWxkZXIoe2hlYWRsZXNzOiB0cnVlLCBleHBsaWNpdFJvb3Q6IHRydWUsIHJvb3ROYW1lOiAnZGl2JywgcmVuZGVyT3B0czoge3ByZXR0eTogZmFsc2V9fSk7XG4gICAgcmV0dXJuIGJ1aWxkZXIuYnVpbGRPYmplY3QoY29udGVudCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbn1cblxudXRpbHMuY29weUZyb21YTUwgPSBmdW5jdGlvbih4bWwsIGRlc3QsIGZpZWxkcykge1xuICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbihmKSB7XG4gICAgbGV0IGZyb20gPSBmO1xuICAgIGxldCB0byA9IGY7XG4gICAgbGV0IG9wdGlvbnMgPSB7fTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmKSkge1xuICAgICAgZnJvbSA9IGZbMF07XG4gICAgICB0byA9IGZbMV07XG4gICAgICBpZiAoZi5sZW5ndGggPiAyKSB7XG4gICAgICAgIG9wdGlvbnMgPSBmWzJdO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB7IGtlZXBBcnJheSwgaW5jbHVkZVNuaXBwZXQgfSA9IG9wdGlvbnM7XG4gICAgaWYgKHhtbFtmcm9tXSAhPT0gdW5kZWZpbmVkKXtcbiAgICAgIGRlc3RbdG9dID0ga2VlcEFycmF5ID8geG1sW2Zyb21dIDogeG1sW2Zyb21dWzBdO1xuICAgIH1cbiAgICBpZiAoZGVzdFt0b10gJiYgdHlwZW9mIGRlc3RbdG9dLl8gPT09ICdzdHJpbmcnKSB7XG4gICAgICBkZXN0W3RvXT1kZXN0W3RvXS5fO1xuICAgIH1cbiAgICBpZiAoaW5jbHVkZVNuaXBwZXQgJiYgZGVzdFt0b10gJiYgdHlwZW9mIGRlc3RbdG9dID09PSAnc3RyaW5nJykge1xuICAgICAgZGVzdFt0byArICdTbmlwcGV0J10gPSB1dGlscy5nZXRTbmlwcGV0KGRlc3RbdG9dKTtcbiAgICB9XG4gIH0pXG59XG5cbnV0aWxzLm1heWJlUHJvbWlzaWZ5ID0gZnVuY3Rpb24oY2FsbGJhY2ssIHByb21pc2UpIHtcbiAgaWYgKCFjYWxsYmFjaykgcmV0dXJuIHByb21pc2U7XG4gIHJldHVybiBwcm9taXNlLnRoZW4oXG4gICAgZGF0YSA9PiBzZXRUaW1lb3V0KCgpID0+IGNhbGxiYWNrKG51bGwsIGRhdGEpKSxcbiAgICBlcnIgPT4gc2V0VGltZW91dCgoKSA9PiBjYWxsYmFjayhlcnIpKVxuICApO1xufVxuXG5jb25zdCBERUZBVUxUX0VOQ09ESU5HID0gJ3V0ZjgnO1xuY29uc3QgRU5DT0RJTkdfUkVHRVggPSAvKGVuY29kaW5nfGNoYXJzZXQpXFxzKj1cXHMqKFxcUyspLztcbmNvbnN0IFNVUFBPUlRFRF9FTkNPRElOR1MgPSBbJ2FzY2lpJywgJ3V0ZjgnLCAndXRmMTZsZScsICd1Y3MyJywgJ2Jhc2U2NCcsICdsYXRpbjEnLCAnYmluYXJ5JywgJ2hleCddO1xuY29uc3QgRU5DT0RJTkdfQUxJQVNFUyA9IHtcbiAgJ3V0Zi04JzogJ3V0ZjgnLFxuICAnaXNvLTg4NTktMSc6ICdsYXRpbjEnLFxufVxuXG51dGlscy5nZXRFbmNvZGluZ0Zyb21Db250ZW50VHlwZSA9IGZ1bmN0aW9uKGNvbnRlbnRUeXBlKSB7XG4gIGNvbnRlbnRUeXBlID0gY29udGVudFR5cGUgfHwgJyc7XG4gIGxldCBtYXRjaCA9IGNvbnRlbnRUeXBlLm1hdGNoKEVOQ09ESU5HX1JFR0VYKTtcbiAgbGV0IGVuY29kaW5nID0gKG1hdGNoIHx8IFtdKVsyXSB8fCAnJztcbiAgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpO1xuICBlbmNvZGluZyA9IEVOQ09ESU5HX0FMSUFTRVNbZW5jb2RpbmddIHx8IGVuY29kaW5nO1xuICBpZiAoIWVuY29kaW5nIHx8IFNVUFBPUlRFRF9FTkNPRElOR1MuaW5kZXhPZihlbmNvZGluZykgPT09IC0xKSB7XG4gICAgZW5jb2RpbmcgPSBERUZBVUxUX0VOQ09ESU5HO1xuICB9XG4gIHJldHVybiBlbmNvZGluZztcbn1cbiJdLCJuYW1lcyI6WyJ1dGlscyIsIm1vZHVsZSIsImV4cG9ydHMiLCJlbnRpdGllcyIsInJlcXVpcmUiLCJ4bWwyanMiLCJzdHJpcEh0bWwiLCJzdHIiLCJyZXBsYWNlIiwiZ2V0U25pcHBldCIsImRlY29kZUhUTUwiLCJ0cmltIiwiZ2V0TGluayIsImxpbmtzIiwicmVsIiwiZmFsbGJhY2tJZHgiLCJpIiwibGVuZ3RoIiwiJCIsImhyZWYiLCJnZXRDb250ZW50IiwiY29udGVudCIsIl8iLCJidWlsZGVyIiwiQnVpbGRlciIsImhlYWRsZXNzIiwiZXhwbGljaXRSb290Iiwicm9vdE5hbWUiLCJyZW5kZXJPcHRzIiwicHJldHR5IiwiYnVpbGRPYmplY3QiLCJjb3B5RnJvbVhNTCIsInhtbCIsImRlc3QiLCJmaWVsZHMiLCJmb3JFYWNoIiwiZiIsImZyb20iLCJ0byIsIm9wdGlvbnMiLCJBcnJheSIsImlzQXJyYXkiLCJrZWVwQXJyYXkiLCJpbmNsdWRlU25pcHBldCIsInVuZGVmaW5lZCIsIm1heWJlUHJvbWlzaWZ5IiwiY2FsbGJhY2siLCJwcm9taXNlIiwidGhlbiIsImRhdGEiLCJzZXRUaW1lb3V0IiwiZXJyIiwiREVGQVVMVF9FTkNPRElORyIsIkVOQ09ESU5HX1JFR0VYIiwiU1VQUE9SVEVEX0VOQ09ESU5HUyIsIkVOQ09ESU5HX0FMSUFTRVMiLCJnZXRFbmNvZGluZ0Zyb21Db250ZW50VHlwZSIsImNvbnRlbnRUeXBlIiwibWF0Y2giLCJlbmNvZGluZyIsInRvTG93ZXJDYXNlIiwiaW5kZXhPZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/rss-parser/lib/utils.js\n");

/***/ })

};
;